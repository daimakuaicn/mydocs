import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as o,b as n,d as a,e as t,f as s}from"./app-bcb92fc7.js";const l={},u=s(`<h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1.基本概念</h2><h3 id="_1-1单体架构" tabindex="-1"><a class="header-anchor" href="#_1-1单体架构" aria-hidden="true">#</a> 1.1单体架构</h3><p><strong>单体架构:</strong> 把项目中所有功能模块全部写在一个工程中</p><p><strong>缺点</strong></p><ul><li>代码混乱,维护困难.</li><li>修改一个功能,对其他功能产生影响,牵一发动全身.</li><li>拓展性差,可靠性差,风险高</li></ul><p><strong>优点</strong></p><ul><li>结构简单,部署方便,易于维护</li></ul><h3 id="_1-2微服务架构" tabindex="-1"><a class="header-anchor" href="#_1-2微服务架构" aria-hidden="true">#</a> 1.2微服务架构</h3><p><strong>微服务架构:</strong> 微小服务,把一个完整项目,按照功能拆分成多个独立的服务模块,每个服务模块独立运行,独立部署,可以使用不同的数据库,可以使用不同的语言.</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150308975.png" alt="image-20231025150308975" tabindex="0" loading="lazy"><figcaption>image-20231025150308975</figcaption></figure><p><strong>优点:</strong></p><ul><li>相互独立,谁修改某个服务,其他服务不受影响,解耦合</li><li>可拓展性好</li><li>容错性高</li><li>高效性强</li><li>灵活性强</li></ul><p><strong>缺点:</strong></p><ul><li>部署不是很方便</li><li>微服务的管理</li><li>服务间的通讯</li><li>前端访问问题</li><li>配置文件管理</li></ul><p><strong>特点:</strong></p><ol><li>单一职责:每个服务做到对应唯一业务能力</li><li>自治:团队独立,数据独立,堵路部署和交付</li><li>面向服务:服务提供唯一标准的接口,与语言和技术无关</li></ol><p>###1.3分布式和集群</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150319539.png" alt="image-20231025150319539" tabindex="0" loading="lazy"><figcaption>image-20231025150319539</figcaption></figure><p>部署项目的时候,使用大于两台服务器进行部署:</p><p><strong>负载均衡:平均负担压力</strong></p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150331327.png" alt="image-20231025150331327" tabindex="0" loading="lazy"><figcaption>image-20231025150331327</figcaption></figure><p>**集群:**多台服务器上部署相同的项目(内容)分担服务器访问压力</p><hr><p>每台服务器放的不同内容,不同模块.</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150343310.png" alt="image-20231025150343310" tabindex="0" loading="lazy"><figcaption>image-20231025150343310</figcaption></figure><p>**分布式:**多台服务器上面部署不同内容模块</p><h2 id="_2-springcloud初体验" tabindex="-1"><a class="header-anchor" href="#_2-springcloud初体验" aria-hidden="true">#</a> 2.SpringCloud初体验</h2><h3 id="_2-1什么是springcloud" tabindex="-1"><a class="header-anchor" href="#_2-1什么是springcloud" aria-hidden="true">#</a> 2.1什么是SpringCloud</h3><ul><li>SpringCloud并不是一种技术,springcloud是一系列框架或者组件的集合,springcloud里面包含了很多组件和框架,使用这些组件可以实现微服务架构.</li><li>SpringCloud是一系列框架的有序集合.在SpringCloud这个项目中包含很多的组件,子框架,每一个组件都是用来解决问题架构中所遇到的问题,因此SpringCloud可以看做是一套微服务的解决方案.</li><li>springcloud实现微服务架构离不开SpringBoot</li></ul><h3 id="_2-2springcloud组成" tabindex="-1"><a class="header-anchor" href="#_2-2springcloud组成" aria-hidden="true">#</a> 2.2SpringCloud组成</h3><ul><li>SpringCloud包含很多组件</li><li>原生组件:由网飞公司开发,随着时间推迟,处于维护状态,不再更新.</li><li>Spring Cloud alibaba组件:目前最流行的组件</li><li>Spring Cloud 腾讯组件:</li><li>SpringCloud组件自己研发的组件:GatWay网关</li><li><strong>常用组件</strong></li></ul><p>⭐Nacos(注册中心,配置中心)</p><p>⭐Openfeign(远程调用)</p><p>⭐LoadBalancer(负载均衡)</p><p>⭐Gateway(服务网关)</p><p>⭐Sentinel(服务保护组件)</p><h3 id="_2-3springcloud初体验" tabindex="-1"><a class="header-anchor" href="#_2-3springcloud初体验" aria-hidden="true">#</a> 2.3SpringCloud初体验</h3><h4 id="_2-3-1工程结构说明" tabindex="-1"><a class="header-anchor" href="#_2-3-1工程结构说明" aria-hidden="true">#</a> 2.3.1工程结构说明</h4><p>在创建微服务工程的时候都需要先提供一个工程,使用父工程来管理多个微服务所需的依赖,我们的微服务系统结构如下:</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150259507.png" alt="image-20231025150259507" tabindex="0" loading="lazy"><figcaption>image-20231025150259507</figcaption></figure><h4 id="_2-3-2-父工程搭建" tabindex="-1"><a class="header-anchor" href="#_2-3-2-父工程搭建" aria-hidden="true">#</a> 2.3.2 父工程搭建</h4><p><strong>步骤</strong></p><ol><li>创建一个maven父工程</li><li>添加依赖:</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 定义属性 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>2022.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">&gt;</span></span>2022.0.0.0-RC2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-spring-boot.version</span><span class="token punctuation">&gt;</span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-spring-boot.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 指定spring boot父工程 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 在dependencyManagement标签中所定义的依赖不会被子工程直接进行继承 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- spring cloud的依赖 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- spring cloud alibaba的依赖 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- mysql的驱动 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- mybatis和spring boot整合的起步依赖 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${mybatis-spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>删除src目录</li></ol><h4 id="_2-3-3子工程搭建" tabindex="-1"><a class="header-anchor" href="#_2-3-3子工程搭建" aria-hidden="true">#</a> 2.3.3子工程搭建</h4><ol><li>创建子模块</li><li>在子模块中添加依赖:</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- spring boot的web开发所需要的起步依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- mysql的驱动 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- mybatis和spring boot整合的起步依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!-- lombok依赖，快速生成getter和setter方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在resourse目录下面创建一个application.yml文件,文件如下:</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置服务端口号</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10100</span>

<span class="token comment"># 配置数据库的连接信息</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">?</span>characterEncoding=UTF8
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root

<span class="token comment"># 配置mybatis的相关信息</span>
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.spzx.cloud.user.entity
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/<span class="token important">*.xml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>###2.4 SpringCloud远程调用</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150254012.png" alt="image-20231025150254012" tabindex="0" loading="lazy"><figcaption>image-20231025150254012</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150247970.png" alt="image-20231025150247970" tabindex="0" loading="lazy"><figcaption>image-20231025150247970</figcaption></figure><h4 id="_2-4-1传统调用" tabindex="-1"><a class="header-anchor" href="#_2-4-1传统调用" aria-hidden="true">#</a> 2.4.1传统调用</h4><p>如果想完成上面的需求,我们就需要在Order为服务中向User微服务发起一个http请求,调用<code>http://localhost:10100/api/user/findUserByuserId/{userId}</code>这个接口</p><ul><li>第一步:在调用端order模块创建配置类,创建RestTemplate对象</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025181951482.png" alt="image-20231025181951482" tabindex="0" loading="lazy"><figcaption>image-20231025181951482</figcaption></figure><ul><li><p>第二步:在调用端order模块创建User实体类,接收返回主句</p></li><li><p>第三步:在Order实现类的方法使用RestTemplate发起远程调用(在Order微服务的Spring容器中注册一个RestTemplate)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.cloud.order.config;</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第四步:获取RestTemplate远程调用返回结果,数据封装</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> implement <span class="token class-name">OrderService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoWired</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@AutoWired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">findOrderByOrderId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> <span class="token class-name">OrderId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//根据Id查询订单数据</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">findOrderByOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发起远程调用</span>
        <span class="token class-name">User</span> <span class="token class-name">User</span> <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:10100/api/user/findUserByUserId/1&quot;</span><span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">serUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回订单数据</span>
        <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2传统方式调用的问题所在" tabindex="-1"><a class="header-anchor" href="#_2-4-2传统方式调用的问题所在" aria-hidden="true">#</a> 2.4.2传统方式调用的问题所在</h4><ol><li>维护性差:服务方提供IP地址发生改变,那么此时服务消费方就需要修改代码</li><li>缺少负载均衡机制:负载均衡就是负载请求通过多台服务器进行处理</li></ol><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150240929.png" alt="image-20231025150240929" tabindex="0" loading="lazy"><figcaption>image-20231025150240929</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150235228.png" alt="image-20231025150235228" tabindex="0" loading="lazy"><figcaption>image-20231025150235228</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025183404072.png" alt="image-20231025183404072" tabindex="0" loading="lazy"><figcaption>image-20231025183404072</figcaption></figure><h4 id="_2-4-3其他问题须知" tabindex="-1"><a class="header-anchor" href="#_2-4-3其他问题须知" aria-hidden="true">#</a> 2.4.3其他问题须知</h4><ul><li>SpringBoot <ul><li>SpringCloud是一系列框架集合,使用这些框架(组件)实现微服务</li><li>SpringCloud实现微服务框架,必须使用SpringBoot</li></ul></li></ul><h2 id="_3-nacos注册中心" tabindex="-1"><a class="header-anchor" href="#_3-nacos注册中心" aria-hidden="true">#</a> 3.Nacos注册中心</h2><p>解决传统远程调用所存在的问题,SpringCloud Alibaba 提供了nacos注册中心:</p><h3 id="_3-1-nacos注册中心简介" tabindex="-1"><a class="header-anchor" href="#_3-1-nacos注册中心简介" aria-hidden="true">#</a> 3.1 Nacos注册中心简介</h3><p>通过注册中心可以对服务提供方和消费方解耦合.</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150229500.png" alt="image-20231025150229500" tabindex="0" loading="lazy"><figcaption>image-20231025150229500</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025183451126.png" alt="image-20231025183451126" tabindex="0" loading="lazy"><figcaption>image-20231025183451126</figcaption></figure><p><strong>工作流程</strong>:<br> 服务提供方在启动的时候,会向注册中心注册自己服务的详情信息(ip,端口号等).在注册中心会维护一张服务清单,保存这些注册信息,注册中心需要以心跳的方式去检测清单中的服务是否可用,如果不可用,需要在服务清单中剔除不可用的服务.</p><p>服务消费方向服务注册中心咨询服务,并获取所有服务的实例清单,然后按照指定的负载均衡算法从服务清单中选择一个服务实例进行访问.</p><h3 id="_3-2注册中心产品" tabindex="-1"><a class="header-anchor" href="#_3-2注册中心产品" aria-hidden="true">#</a> 3.2注册中心产品</h3><h3 id="eurela" tabindex="-1"><a class="header-anchor" href="#eurela" aria-hidden="true">#</a> Eurela</h3><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150223666.png" alt="image-20231025150223666" tabindex="0" loading="lazy"><figcaption>image-20231025150223666</figcaption></figure><h3 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> nacos</h3><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025150218218.png" alt="image-20231025150218218" tabindex="0" loading="lazy"><figcaption>image-20231025150218218</figcaption></figure><p>docker安装nacos:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取镜像</span>
<span class="token function">docker</span> pull nacos/nacos-server:v2.2.2

<span class="token comment"># 创建容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> nacos <span class="token parameter variable">-e</span> <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token parameter variable">-p</span> <span class="token number">8848</span>:8848 <span class="token parameter variable">-p</span> <span class="token number">9848</span>:9848 <span class="token parameter variable">-d</span> nacos/nacos-server:v2.2.2

<span class="token comment"># nacos2.x的版本新增了一个客户端与服务端的gRpc的通讯端口号9848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81),r={href:"http://192.168.136.142:8848/nacos",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>用户名和密码：nacos/nacos</p><p>nacos启动:</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>#cmd方式进入bin里面,执行命令:
startup.cmd -m standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3微服务集成nacos" tabindex="-1"><a class="header-anchor" href="#_3-3微服务集成nacos" aria-hidden="true">#</a> 3.3微服务集成nacos</h3><h4 id="_3-3-1准备工作" tabindex="-1"><a class="header-anchor" href="#_3-3-1准备工作" aria-hidden="true">#</a> 3.3.1准备工作</h4><p>需求：将两个微服务(user、order)注册到nacos中</p><p>实现步骤：</p><p>1、在两个子工程中引入如下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- nacos作为注册中心的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在application.yml文件中添加如下配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># 配置nacos注册中心的地址</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user   <span class="token comment"># 每一个服务注册到nacos注册中心都需要提供一个服务名称,order微服务注册的时候需要更改微服务名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、启动两个微服务：就可以在nacos的后台管理系统中，看到如下的注册信息：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230809100204178.png" alt="image-20230809100204178" tabindex="0" loading="lazy"><figcaption>image-20230809100204178</figcaption></figure><h4 id="_3-3-2远程调用" tabindex="-1"><a class="header-anchor" href="#_3-3-2远程调用" aria-hidden="true">#</a> 3.3.2远程调用</h4><p>当我们把微服务都注册到注册中心以后，那么此时就可以根据服务的名称从注册中心获取服务的ip地址和端口号了，进而就可以更改远程调用代码！</p><h4 id="_3-3-2-1方案一" tabindex="-1"><a class="header-anchor" href="#_3-3-2-1方案一" aria-hidden="true">#</a> 3.3.2.1方案一</h4><p>使用到Spring Cloud中所提供的一个服务发现的客户端对象：<strong>DiscoveryClient</strong>。</p><p>代码实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>          <span class="token comment">// 注入RestTemplate远程调用工具</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">findOrderByOrderId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 根据id查询订单数据</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">findOrderByOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 根据服务名称从注册中心中获取服务实例列表</span>
        <span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> <span class="token function">chooseServiceInstance</span><span class="token punctuation">(</span><span class="token string">&quot;spzx-cloud-user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发起远程调用</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://&quot;</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot;/api/user/findUserByUserId/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回订单数据</span>
        <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 根据服务的名称从注册中心中获取服务地址信息</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">chooseServiceInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> applicationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取服务实例列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span>applicationName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 编写一个简易的随机负载均衡算法</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> instanceIndex <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instanceIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回服务实例</span>
        <span class="token keyword">return</span> serviceInstance <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以启动多个user微服务实例进行负载均衡的测试。</p><h4 id="_3-3-2-2方案二" tabindex="-1"><a class="header-anchor" href="#_3-3-2-2方案二" aria-hidden="true">#</a> 3.3.2.2方案二</h4><p>使用Spring Cloud中所提供的一个组件：<strong>spring-cloud-loadbalancer</strong>负载均衡</p><p>使用步骤：</p><p>1、在order微服务中添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- spring cloud 所提供的负载均衡器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在声明RestTemplate的方法上添加**@LoadBalanced**注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>       <span class="token comment">// 让RestTemplate具有负载均衡的能力</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、更改远程调用代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 服务提供方的服务ip地址和端口号可以使用服务提供方的服务名称进行替换</span>
restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://spzx-cloud-user/api/user/findUserByUserId/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：默认使用的负载均衡算法就是轮询【依次调用对应服务】</p><h3 id="_3-4nacos高级特性-服务集群" tabindex="-1"><a class="header-anchor" href="#_3-4nacos高级特性-服务集群" aria-hidden="true">#</a> 3.4Nacos高级特性:服务集群</h3><h4 id="_3-4-1服务集群" tabindex="-1"><a class="header-anchor" href="#_3-4-1服务集群" aria-hidden="true">#</a> 3.4.1服务集群</h4><h5 id="_3-4-1-1集群概述" tabindex="-1"><a class="header-anchor" href="#_3-4-1-1集群概述" aria-hidden="true">#</a> 3.4.1.1集群概述</h5><p>在实际生产环境中，为了保证每一个服务的高可用，那么此时就需要去构建服务集群，但是并不是说把所有的服务都部署在一个机房里。而是将多个服务分散的部署到不同的机房中，每一个机房的服务可以看做成是一个集群。如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025144212023.png" alt="image-20231025144212023" tabindex="0" loading="lazy"><figcaption>image-20231025144212023</figcaption></figure><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：上海机房内的order微服务应该优先访问同机房的user微服务。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025184553633.png" alt="image-20231025184553633" tabindex="0" loading="lazy"><figcaption>image-20231025184553633</figcaption></figure><p>根据机房进行配置,指定当前服务默认是哪个机房.保证集群的高可用</p><p><strong>❓</strong> <strong>怎么保证服务的高可用</strong></p><p>第一步:在User模块配置文件添加配置,指定访问集群机房</p><p>第二步:在服务端User进行配置:配置所属区域</p><p>第三步:在调用端Order进行配置:配置Order模块远程访问的集群是什么,配置负载均衡效果</p><p>第四步:测试:如果错误,检查配置文件格式</p><p>轮循环效果:其中一个地区服务器下线就会访问另外一个,恢复,会重新进行访问第一个.</p><p>❌上线下线会重新访问原来的,如果是服务器挂了,就不会访问之前的了</p><p><strong>解决方案</strong>:把之前的缓存删除,重新进行启动</p><h5 id="_3-4-1-2集群配置" tabindex="-1"><a class="header-anchor" href="#_3-4-1-2集群配置" aria-hidden="true">#</a> 3.4.1.2集群配置</h5><ul><li>修改spzx-cloud-user的application.yml文件，添加集群配置：</li></ul><div class="language-YAML line-numbers-mode" data-ext="YAML"><pre class="language-YAML"><code>spring:
  cloud:
    nacos:
      discovery:
        cluster-name: SH		# 配置服务所属集群
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动三个服务user微服务实例，实例所属集群分配情况：实例1属于SH，实例2和实例3属于BJ</p><ul><li>通过添加添加JVM参数更改服务实例所属集群，启动实例2和实例3</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230809102346561.png" alt="image-20230809102346561" tabindex="0" loading="lazy"><figcaption>image-20230809102346561</figcaption></figure><p>实例2：10101</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">10101</span> -Dspring.cloud.nacos.discovery.cluster-name<span class="token operator">=</span>BJ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例3：10103</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">10103</span> -Dspring.cloud.nacos.discovery.cluster-name<span class="token operator">=</span>BJ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>启动三个用户微服务实例，查看实例分配情况：</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503183655565.png" alt="image-20230503183655565" tabindex="0" loading="lazy"><figcaption>image-20230503183655565</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503183721175.png" alt="image-20230503183721175" tabindex="0" loading="lazy"><figcaption>image-20230503183721175</figcaption></figure><h5 id="_3-4-1-3集群访问" tabindex="-1"><a class="header-anchor" href="#_3-4-1-3集群访问" aria-hidden="true">#</a> 3.4.1.3集群访问</h5><p>需求：当order服务优先访问SH集群中的user微服务实例，当SH集群中的user微服务实例出现问题以后，在访问BJ集群中的实例。</p><p>步骤：</p><p>1、给order微服务的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> SH		<span class="token comment"># 配置服务所属集群</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、order微服务在loadbalancer组件中集成nacos</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># 配置nacos注册中心的地址</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">loadbalancer</span><span class="token punctuation">:</span>
      <span class="token key atrule">nacos</span><span class="token punctuation">:</span>    <span class="token comment"># 集成nacos的负载均衡算法</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5nacos高级特性-权重配置-了解" tabindex="-1"><a class="header-anchor" href="#_3-5nacos高级特性-权重配置-了解" aria-hidden="true">#</a> 3.5Nacos高级特性:权重配置(了解)</h3><p>使用LoadBalance,默认效果是轮循机制,,我们可以设置权重,权重值越高,被访问的概率越大.一般来讲修改权重的概率不大,场景不多.了解.</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025144200255.png" alt="image-20231025144200255" tabindex="0" loading="lazy"><figcaption>image-20231025144200255</figcaption></figure><p>实际部署中会出现这样的场景：服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下Nacos的负载均衡算法是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来<strong>控制访问频率</strong>，权重越大则访问频率越高。</p><ul><li>在Nacos控制台，找到spzx-cloud-user的实例列表，点击编辑，即可修改权重：</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503185416608.png" alt="image-20230503185416608" tabindex="0" loading="lazy"><figcaption>image-20230503185416608</figcaption></figure><p>权重取值范围：0~1</p><ul><li>在配置文件中进行权重配置：</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">0.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p><h3 id="_3-6nacos高级特性-环境隔离" tabindex="-1"><a class="header-anchor" href="#_3-6nacos高级特性-环境隔离" aria-hidden="true">#</a> 3.6Nacos高级特性:环境隔离</h3><h4 id="_3-6-1环境隔离概述" tabindex="-1"><a class="header-anchor" href="#_3-6-1环境隔离概述" aria-hidden="true">#</a> 3.6.1环境隔离概述</h4><p>在实际的开发过程中，可能会存在很多个软件环境：开发环境、测试环境、生产环境。</p><p>nacos也是支持多环境隔离配置的，在nacos是通过<strong>namespace</strong>来实现多环境的隔离。</p><p>完整的服务注册数据存储结构如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503185847770.png" alt="image-20230503185847770" tabindex="0" loading="lazy"><figcaption>image-20230503185847770</figcaption></figure><p>namespace + group 才可以确定具体的微服务实例。默认情况下，所有service、group都在同一个namespace，名为public。如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503190738675.png" alt="image-20230503190738675" tabindex="0" loading="lazy"><figcaption>image-20230503190738675</figcaption></figure><h4 id="_3-6-2创建名称空间" tabindex="-1"><a class="header-anchor" href="#_3-6-2创建名称空间" aria-hidden="true">#</a> 3.6.2创建名称空间</h4><p>我们也可以创建新的名称空间，来将不同的服务隔离到不同的环境下面，如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503191050511.png" alt="image-20230503191050511" tabindex="0" loading="lazy"><figcaption>image-20230503191050511</figcaption></figure><h4 id="_3-6-3微服务配置名称空间" tabindex="-1"><a class="header-anchor" href="#_3-6-3微服务配置名称空间" aria-hidden="true">#</a> 3.6.3微服务配置名称空间</h4><p>给微服务添加名称空间的配置，来指定该微服务所属环境。</p><p>例如，修改spzx-cloud-order的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># 配置nacos注册中心的地址</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 4a88035e<span class="token punctuation">-</span>acf3<span class="token punctuation">-</span>45a9<span class="token punctuation">-</span>924f<span class="token punctuation">-</span>2421acbff67a  <span class="token comment"># 配置服务实例所属名称空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时order微服务所对应的服务实例就属于新的名称空间，user微服务所对应的服务实例属于public的名称空间，那么此时在进行远程调用的时候，就会出现如下的错误：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503191655562.png" alt="image-20230503191655562" tabindex="0" loading="lazy"><figcaption>image-20230503191655562</figcaption></figure><h3 id="_3-7nacos高级特性-实例类型" tabindex="-1"><a class="header-anchor" href="#_3-7nacos高级特性-实例类型" aria-hidden="true">#</a> 3.7Nacos高级特性:实例类型</h3><p>Nacos中的服务实例存在两种类型：</p><p>1、临时实例：如果实例宕机超过一定时间，会从服务列表剔除，并且实例会定时上报自身的健康状态给Nacos注册中心，默认的类型。</p><p>2、非临时实例：如果实例宕机，不会从服务列表剔除，Nacos注册中心会主动询问实例的健康状态，也可以叫永久实例。</p><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 配置该实例为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-loadbalancer" tabindex="-1"><a class="header-anchor" href="#_4-loadbalancer" aria-hidden="true">#</a> 4.LoadBalancer</h2><h3 id="_4-1简介" tabindex="-1"><a class="header-anchor" href="#_4-1简介" aria-hidden="true">#</a> 4.1简介</h3><p>Spring Cloud LoadBalancer是Spring Cloud中负责客户端负载均衡的模块，其主要原理是通过选择合适的服务实例来实现负载均衡。</p><p>客户端负载均衡：就是负载均衡算法由客户端提供</p><p>如下图所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503213502251.png" alt="image-20230503213502251" tabindex="0" loading="lazy"><figcaption>image-20230503213502251</figcaption></figure><h3 id="_4-2-loadbalancer的执行流程" tabindex="-1"><a class="header-anchor" href="#_4-2-loadbalancer的执行流程" aria-hidden="true">#</a> 4.2 LoadBalancer的执行流程</h3><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025190315177.png" alt="image-20231025190315177" tabindex="0" loading="lazy"><figcaption>image-20231025190315177</figcaption></figure><ol><li>通过LoadBalancerInterceptor请求拦截器拦截我们的RestTemplate请求:</li><li>获取请求URL,然后从请求中获取提供方的主机名称</li><li>然后调用LoadBalancerClient中execute方法,将服务提供方的名称传递过去</li><li>在LoadBalancerClient的choose方法通过ReactiveLoadBalancer.Factory从Nacos注册中心获取列表以及负载均衡算法实例对象</li><li>通过ReactieloadBalancer从服务列表中选择一个服务实例地址,然后发起远程调用</li></ol><h3 id="_4-3源码跟踪" tabindex="-1"><a class="header-anchor" href="#_4-3源码跟踪" aria-hidden="true">#</a> 4.3源码跟踪</h3><blockquote><p>LoadBalancerInterceptor</p></blockquote><p>核心源码如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503223822056.png" alt="image-20230503223822056" tabindex="0" loading="lazy"><figcaption>image-20230503223822056</figcaption></figure><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>`,115),g=n("code",null,"request.getURI()",-1),k={href:"http://spzx-cloud-user/api/user/findUserByUserId/1",target:"_blank",rel:"noopener noreferrer"},m=s(`<p>2、<code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>spzx-cloud-user</code></p><p>3、<code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</p><p>这里的<code>this.loadBalancer</code>是<code>BlockingLoadBalancerClient</code>类型，我们继续跟入。</p><blockquote><p>BlockingLoadBalancerClient</p></blockquote><p>核心源码如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230503224702411.png" alt="image-20230503224702411" tabindex="0" loading="lazy"><figcaption>image-20230503224702411</figcaption></figure><p>ReactiveLoadBalancer.Factory的getInstance方法做了两件事情：</p><p>1、获取了一个具体的负载均衡算法对象</p><p>2、根据服务的id从Nacos注册中心中获取服务地址列表</p><p>紧跟着调用了RoundRobinLoadBalancer#choose方法，从服务列表中选择一个服务实例对象。</p><p>默认的负载均衡算法：RoundRobinLoadBalancer</p><h3 id="_4-4补充知识-负载均衡算法" tabindex="-1"><a class="header-anchor" href="#_4-4补充知识-负载均衡算法" aria-hidden="true">#</a> 4.4补充知识:负载均衡算法:</h3><p>按照特定的方式实现特定功能就是算法:</p><p>轮循算法:</p><p>数学知识:</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025145227696.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231025145331201.png" alt="轮循算法数学原理" tabindex="0" loading="lazy"><figcaption>轮循算法数学原理</figcaption></figure><p>请求次数%服务器数量=</p><h3 id="_4-5更改负载均衡算法" tabindex="-1"><a class="header-anchor" href="#_4-5更改负载均衡算法" aria-hidden="true">#</a> 4.5更改负载均衡算法</h3><p>LoadBalancer默认的负载均衡算法是RoundRobinLoadBalancer，如果想更改默认的负载均衡算法，那么此时需要向Spring容器中注册一个Bean，并且配置负载均衡的使用者。</p><p>代码如下所示：</p><p>1、在Spring容器中注册一个Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">environment</span>: 用于获取环境属性配置，其中LoadBalancerClientFactory.PROPERTY_NAME表示该负载均衡器要应用的服务名称。
     * <span class="token keyword">@param</span> <span class="token parameter">loadBalancerClientFactory</span>: 是Spring Cloud中用于创建负载均衡器的工厂类，通过getLazyProvider方法获取ServiceInstanceListSupplier对象，以提供可用的服务列表。
     * ServiceInstanceListSupplier：用于提供ServiceInstance列表的接口，可以从DiscoveryClient或者其他注册中心中获取可用的服务实例列表。
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">ReactorLoadBalancer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">randomLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerClientFactory</span> loadBalancerClientFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">LoadBalancerClientFactory</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomLoadBalancer</span><span class="token punctuation">(</span>loadBalancerClientFactory<span class="token punctuation">.</span><span class="token function">getLazyProvider</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置负载均衡算法的使用者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@LoadBalancerClients</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@LoadBalancerClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;spzx-cloud-user&quot;</span> <span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">CustomLoadBalancerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token comment">// 将负载均衡算法应用到指定的服务提供方中</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>       <span class="token comment">// 让RestTemplate具有负载均衡的能力</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-openfeign组件" tabindex="-1"><a class="header-anchor" href="#_5-openfeign组件" aria-hidden="true">#</a> 5.OpenFeign组件</h2><h3 id="_5-1openfeign组件介绍" tabindex="-1"><a class="header-anchor" href="#_5-1openfeign组件介绍" aria-hidden="true">#</a> 5.1OpenFeign组件介绍</h3><p>基于Nacos和OpenFeign组件一起使用,实现远程调用过程</p>`,28),v={href:"https://github.com/OpenFeign/feign%E5%85%B6%E4%BD%9C%E7%94%A8%E5%B0%B1%E6%98%AF%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8F%91%E9%80%81%E3%80%82",target:"_blank",rel:"noopener noreferrer"},b=s(`<figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624093622996.png" alt="image-20230624093622996" tabindex="0" loading="lazy"><figcaption>image-20230624093622996</figcaption></figure><p>使用RestTemplate进行远程调用代码回顾：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624093650991.png" alt="image-20230624093650991" tabindex="0" loading="lazy"><figcaption>image-20230624093650991</figcaption></figure><p>存在的弊端：参数传递不太方便</p><h3 id="_5-2openfeign初体验" tabindex="-1"><a class="header-anchor" href="#_5-2openfeign初体验" aria-hidden="true">#</a> 5.2OpenFeign初体验</h3><p>OpenFeign的使用步骤如下：</p><p>1、我们在spzx-cloud-order服务的pom文件中引入OpenFeign的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 加入OpenFeign的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在启动类上添加**@EnableFeignClients**开启OpenFeign的功能支持</p><p>3、编写OpenFeign的客户端</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;spzx-cloud-user&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// 声明当前接口是一个访问user-service的feign的客户端</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/user/findUserByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">;</span>	<span class="token comment">// 根据userId查询用户信息的接口方法</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><p>① 请求方式：GET</p>`,13),h=n("p",{userId:""},"② 请求路径：/api/user/findUserByUserId/",-1),f=s(`<p>③ 请求参数：Long userId</p><p>④ 返回值类型：User</p><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p><p>4、修改OrderService中的远程调用代码，使用Feign客户端代替RestTemplate：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserFeignClient</span> userFeignClient <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">findOrderByOrderId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">findOrderByOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 远程调用</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userFeignClient<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        order<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> order <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3openfeign自定义配置" tabindex="-1"><a class="header-anchor" href="#_5-3openfeign自定义配置" aria-hidden="true">#</a> 5.3OpenFeign自定义配置</h3><h4 id="_5-3-1-日志配置" tabindex="-1"><a class="header-anchor" href="#_5-3-1-日志配置" aria-hidden="true">#</a> 5.3.1 日志配置</h4><p>OpenFeign可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign.Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign.Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p><p>下面以日志为例来演示如何自定义配置，支持两种方式的配置：</p><blockquote><h5 id="基于配置文件的方式" tabindex="-1"><a class="header-anchor" href="#基于配置文件的方式" aria-hidden="true">#</a> 基于配置文件的方式</h5></blockquote><p>基于配置文件修改feign的日志级别可以针对单个服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 将feign包下产生的日志的级别设置为debug</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.atguigu.spzx.cloud.order.feign</span><span class="token punctuation">:</span> debug
    
<span class="token comment"># openfeign日志级别配置</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">openfeign</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">config</span><span class="token punctuation">:</span> 
          <span class="token key atrule">spzx-cloud-user</span><span class="token punctuation">:</span>  
            <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> full
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以针对所有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 将feign包下产生的日志的级别设置为debug</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.atguigu.spzx.cloud.order.feign</span><span class="token punctuation">:</span> debug
    
<span class="token comment"># openfeign日志级别配置</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">openfeign</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">config</span><span class="token punctuation">:</span> 
          <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>
            <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> full
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而日志的级别分为四种：</p><p>① NONE：不记录任何日志信息，这是默认值。</p><p>② BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</p><p>③ HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</p><p>④ FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p><blockquote><h5 id="java代码的方式" tabindex="-1"><a class="header-anchor" href="#java代码的方式" aria-hidden="true">#</a> Java代码的方式</h5></blockquote><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFeignConfiguration</span>  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">;</span> <span class="token comment">// 日志级别为BASIC</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;spzx-cloud-user&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-3-2-超时配置" tabindex="-1"><a class="header-anchor" href="#_5-3-2-超时配置" aria-hidden="true">#</a> 5.3.2 超时配置</h4><p><strong>超时机制概述</strong>：Feign 的超时机制是指在使用 Feign 进行服务间的 HTTP 调用时，设置请求的超时时间。当请求超过设定的超时时间后，Feign 将会中断该请求并抛出相应的异常。</p><p><strong>超时机制的意义</strong>：</p><p>1、防止长时间等待：通过设置适当的超时时间，可以避免客户端在请求服务时长时间等待响应而导致的性能问题。如果没有超时机制，客户端可能会一直等待，从而影响整个系统的吞吐量和响应时间。</p><p>2、避免资源浪费：超时机制可以帮助及时释放占用的资源，例如连接、线程等。如果请求一直处于等待状态而不超时，将导致资源的浪费和系统的负载增加。</p><p>3、优化用户体验：超时机制可以防止用户长时间等待无响应的情况发生，提供更好的用户体验。当请求超时时，可以及时给出错误提示或进行相应的处理，以提醒用户或采取其他措施。</p><p>feign默认的超时配置为：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624103625541.png" alt="image-20230624103625541" tabindex="0" loading="lazy"><figcaption>image-20230624103625541</figcaption></figure><p>超时时间越长，资源浪费的时间就越长，系统的稳定性就越差，因此需要设置为一个较为合理的超时时间，设置防止如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">openfeign</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">config</span><span class="token punctuation">:</span>
          <span class="token key atrule">default</span><span class="token punctuation">:</span>
            <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> full	
            <span class="token key atrule">read-timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>			<span class="token comment"># 读取数据的超时时间设置为2s</span>
            <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>		<span class="token comment"># 建立连接的超时时间设置为2s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-3-重试配置" tabindex="-1"><a class="header-anchor" href="#_5-3-3-重试配置" aria-hidden="true">#</a> 5.3.3 重试配置</h4><p>feign一旦请求超时了，那么此时就会直接抛出<strong>SocketTimeoutException</strong>: Read timed out的异常。请求超时的原因有很多种，如网络抖动、服务不可用等。如果由于网络暂时不可用导致触发了超时机制，那么此时直接返回异常信息就并不是特别的合理，尤其针对查询请求，肯定希望得到一个结果。合理的做法：<strong>触发超时以后，让feign进行重试</strong>。</p><p>具体步骤：</p><p>1、自定义重试器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientRetryer</span> <span class="token keyword">implements</span> <span class="token class-name">Retryer</span> <span class="token punctuation">{</span>

    <span class="token comment">// 定义两个成员变量来决定重试次数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">continueOrPropagate</span><span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 是否需要进行重试取决于该方法是否抛出异常，如果抛出异常重试结束</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        start<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Retryer</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 框架底层调用该方法得到一个重试器</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FeignClientRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置重试器</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">openfeign</span><span class="token punctuation">:</span>
      <span class="token key atrule">client</span><span class="token punctuation">:</span>
        <span class="token key atrule">config</span><span class="token punctuation">:</span>
          <span class="token key atrule">default</span><span class="token punctuation">:</span>
            <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> full
            <span class="token key atrule">read-timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
            <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
            <span class="token key atrule">retryer</span><span class="token punctuation">:</span> com.atguigu.spzx.cloud.order.feign.FeignClientRetryer		<span class="token comment"># 配置自定义重试器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4代码优化" tabindex="-1"><a class="header-anchor" href="#_5-4代码优化" aria-hidden="true">#</a> 5.4代码优化</h3><p><strong>现有代码缺点</strong></p><p>上述代码存在的弊端：每一个服务消费方要调用服务提供方，都是需要去定义一个Feign的接口，不利于后期代码维护在实际的工作过程中，都是将Feign的接口抽取到一个独立的模块中，并且会将数据库所对应的实体类也抽取到一个独立的模块中，供其他的模块进行使用。</p><p>例如，将UserFeginClient、Feign的默认配置都抽取到一个spzx-feign-api包中，Order、User实体类抽取到一个独立的模块中，其他的微服务引用该依赖包，即可直接使用。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624111700625.png" alt="调用优化原理" tabindex="0" loading="lazy"><figcaption>调用优化原理</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027090658693.png" alt="优化过程图解" tabindex="0" loading="lazy"><figcaption>优化过程图解</figcaption></figure><p>面向对象:实现组件复用的目的</p><p>代码实现：</p><p>1、定义一个新的模块spzx-cloud-model，并加入如下的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- lombok依赖，快速生成getter和setter方法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、将spzx-cloud-order微服务和spzx-cloud-user微服务中所对应的实体类抽取到spzx-cloud-model</p><p>3、删除spzx-cloud-order微服务和spzx-cloud-user微服务中所定义的实体类</p><p>4、在spzx-cloud-user微服务中加入如下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spzx-cloud-model<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、定义一个新的模块spzx-feign-api，加入如下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 加入fegin的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 实体类所对应的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spzx-cloud-model<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、将spzx-cloud-order中编写的UserFeginClient、DefaultFeignConfiguration、DefaultFeignConfiguration都复制到spzx-feign-api项目中</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624113033761.png" alt="image-20230624113033761" tabindex="0" loading="lazy"><figcaption>image-20230624113033761</figcaption></figure><p>7、spzx-cloud-order微服务引入spzx-feign-api依赖，并且在启动类上添加feign接口的包扫描路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;com.atguigu.spzx.cloud.feign.api&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-gateway组件" tabindex="-1"><a class="header-anchor" href="#_6-gateway组件" aria-hidden="true">#</a> 6.Gateway组件</h2><h3 id="_6-1认识gateway" tabindex="-1"><a class="header-anchor" href="#_6-1认识gateway" aria-hidden="true">#</a> 6.1认识Gateway</h3><ul><li>Gatway是网关组件,是SpringCloud公司研发的</li><li>Gateway网关底层使用**Filter(过滤器)**对请求进行拦截 <ul><li>限流(拦截下来,进行分时放行)</li><li>黑名单(客户端访问)</li><li>统一功能处理(跨域,登录校验等)</li></ul></li><li>网关有多个过滤器,叫做过滤链</li><li>通过网关多一层处理保障服务器安全</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027092701104.png" alt="网关架构原理" tabindex="0" loading="lazy"><figcaption>网关架构原理</figcaption></figure><h3 id="_6-2三个核心概念" tabindex="-1"><a class="header-anchor" href="#_6-2三个核心概念" aria-hidden="true">#</a> 6.2三个核心概念</h3><h4 id="_6-2-1路由" tabindex="-1"><a class="header-anchor" href="#_6-2-1路由" aria-hidden="true">#</a> 6.2.1路由:</h4><p>不同路由访问不同内容</p><h4 id="_6-2-2断言-匹配关系" tabindex="-1"><a class="header-anchor" href="#_6-2-2断言-匹配关系" aria-hidden="true">#</a> 6.2.2断言(匹配关系):</h4><p>/api/user/**</p><p>/api/user/fing/1</p><p>/api/order/find/2(不能访问)</p><h4 id="_6-2-3过滤器" tabindex="-1"><a class="header-anchor" href="#_6-2-3过滤器" aria-hidden="true">#</a> 6.2.3过滤器:</h4><p>底层是过滤器,网关有很多过滤器,过滤器链.</p><h3 id="_6-3gateway工作流程" tabindex="-1"><a class="header-anchor" href="#_6-3gateway工作流程" aria-hidden="true">#</a> 6.3Gateway工作流程</h3><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027093301407.png" alt="image-20231027093301407" tabindex="0" loading="lazy"><figcaption>image-20231027093301407</figcaption></figure><ul><li>客户端向Spring Cloud Gateway发出请求。然后在Gateway Handler Mapping中找到与请求匹配的路由，将其发送到Gateway Web Handler.</li><li>Handler再通过指定的过滤器链来将请求发送给我们实际的服务执行业务逻辑，然后返回。</li><li>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（&quot;pre&quot;）或之后(&quot;post&quot;)执行业务逻辑。</li><li>Filter在&quot;pre&quot;类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在&quot;post&quot;类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量控制等有着非常重要的作用</li></ul><h3 id="_6-4gateway初体验" tabindex="-1"><a class="header-anchor" href="#_6-4gateway初体验" aria-hidden="true">#</a> 6.4Gateway初体验</h3><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><ol><li><p>创建网关微服务模块</p><ul><li>配置文件</li><li>创建启动类</li><li>引入依赖</li></ul></li><li><p>将网关在nacos中进行注册</p><ul><li><p>修改配置文件</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027094239923.png" alt="重点配置" tabindex="0" loading="lazy"><figcaption>重点配置</figcaption></figure></li></ul></li><li><p>在网关模块中配置文件中,配置路由信息.</p></li></ol><ul><li>1、在spzx-cloud-parent下创建子模块spzx-cloud-gateway(创建网关微服务模块)</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230721101439700.png" alt="image-20230721101439700" tabindex="0" loading="lazy"><figcaption>image-20230721101439700</figcaption></figure><ul><li>2、引入如下依赖：</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--网关--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--nacos服务发现依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 负载均衡组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230721092532222.png" alt="image-20230721092532222" tabindex="0" loading="lazy"><figcaption>image-20230721092532222</figcaption></figure><ul><li>3、编写启动类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.cloud.gateway</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>4、在application.yml配置文件中编写基础配置和路由规则</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8222</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user  <span class="token comment"># 路由id，可以自定义，只要唯一即可</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user  <span class="token comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/<span class="token important">*/user/**</span> <span class="token comment"># 路径匹配</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>order
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>order
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/<span class="token important">*/order/**</span> <span class="token comment"># 路径匹配</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8222</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">spzx-cloud-gateway</span>
<span class="token key attr-name">spring.cloud.gateway.discovery.locator.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].id</span><span class="token punctuation">=</span><span class="token value attr-value">spzx-cloud-user</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].uri</span><span class="token punctuation">=</span><span class="token value attr-value">lb://spzx-cloud-user</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0]</span><span class="token punctuation">=</span><span class="token value attr-value">Path=/*/user/**</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].id</span><span class="token punctuation">=</span><span class="token value attr-value">spzx-cloud-order</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].uri</span><span class="token punctuation">=</span><span class="token value attr-value">lb://spzx-cloud-order</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].predicates[0]</span><span class="token punctuation">=</span><span class="token value attr-value">Path=/*/order/**</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>5、重启测试</li></ul>`,95),y={href:"http://localhost:8222/api/user/findUserByUserId/1%E6%97%B6%EF%BC%8C%E7%AC%A6%E5%90%88%60/api/user/**%60%E8%A7%84%E5%88%99%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},x={href:"http://spzx-cloud-user/api/user/findUserByUserId/1%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86%E7%BB%93%E6%9E%9C%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},_=s('<figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624163155679.png" alt="image-20230624163155679" tabindex="0" loading="lazy"><figcaption>image-20230624163155679</figcaption></figure><h3 id="_6-5predicate的使用-路由断言工厂" tabindex="-1"><a class="header-anchor" href="#_6-5predicate的使用-路由断言工厂" aria-hidden="true">#</a> 6.5Predicate的使用(路由断言工厂)</h3><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027102236948.png" alt="断言工厂" tabindex="0" loading="lazy"><figcaption>断言工厂</figcaption></figure><ul><li>启动网关服务后，在控制台可以看到如下信息：</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230721101903404.png" alt="image-20230721101903404" tabindex="0" loading="lazy"><figcaption>image-20230721101903404</figcaption></figure><ul><li>思考问题：我们在配置文件中只是配置了一个访问路径的规则，怎么就可以实现路由呢?</li></ul>',6),w={href:"https://docs.spring.io/spring-cloud-gateway/docs/4.0.6/reference/html/#gateway-request-predicates-factories",target:"_blank",rel:"noopener noreferrer"},j=s(`<figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624163811030.png" alt="image-20230624163811030" tabindex="0" loading="lazy"><figcaption>image-20230624163811030</figcaption></figure><p>大致有12个，每一种路由工厂的使用Spring Cloud的官网都给出了具体的示例代码，我们可以参考示例代码进行使用。以After Route Predicate</p><p>Factory路由工厂举例，如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/api/user/<span class="token important">**</span>
            <span class="token punctuation">-</span> After=2023<span class="token punctuation">-</span>07<span class="token punctuation">-</span>21T10<span class="token punctuation">:</span>23<span class="token punctuation">:</span>06.978038800+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>  <span class="token comment"># 系统时间在2023-07-21之后才可以进行访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取当前时区时间代码</span>
<span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>总结</li></ul><blockquote><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapper基础框架的一部分。<br> Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个Route Predicate工厂可以进行组合<br> Spring Cloud Gateway创建Route对象时，使用RoutePredicateFactory创建Predicate对象，Predicate对象可以赋值给 Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。所有这些谓词都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑and 。</p></blockquote><h3 id="_6-6过滤器" tabindex="-1"><a class="header-anchor" href="#_6-6过滤器" aria-hidden="true">#</a> 6.6过滤器</h3><h4 id="_6-6-1-过滤器简介" tabindex="-1"><a class="header-anchor" href="#_6-6-1-过滤器简介" aria-hidden="true">#</a> 6.6.1 过滤器简介</h4><p>在gateway中要实现其他的功能：权限控制、流量监控、统一日志处理等。就需要使用到gateway中所提供的过滤器了。过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624164230054.png" alt="image-20230624164230054" tabindex="0" loading="lazy"><figcaption>image-20230624164230054</figcaption></figure><h4 id="_6-6-2-内置过滤器" tabindex="-1"><a class="header-anchor" href="#_6-6-2-内置过滤器" aria-hidden="true">#</a> 6.6.2 内置过滤器</h4><p>spring gateway提供了31种不同的过滤器。</p>`,13),I={href:"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories",target:"_blank",rel:"noopener noreferrer"},z=s(`<p>例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><p>在Gateway中提供了三种级别的类型的过滤器：</p><p>1、路由过滤器：只针对当前路由有效</p><p>2、默认过滤器：针对所有的路由都有效</p><p>3、全局过滤器：针对所有的路由都有效，需要进行自定义</p><h4 id="_6-6-3-路由过滤器" tabindex="-1"><a class="header-anchor" href="#_6-6-3-路由过滤器" aria-hidden="true">#</a> 6.6.3 路由过滤器</h4><p>需求：给所有进入spzx-cloud-user的请求添加一个请求头：Truth=atguigu</p><p>实现：</p><p>1、修改gateway服务的application.yml文件，添加路由过滤</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/api/user/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> daimakuai		<span class="token comment"># 配置路由基本的过滤器，给访问user微服务的所有接口添加Truth请求头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前过滤器写在spzx-cloud-user路由下，因此仅仅对访问spzx-cloud-user的请求有效。</p><p>2、在spzx-cloud-user的接口方法中读取请求头数据，进行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/findUserByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Truth&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;UserController...findUserByUserId方法执行了... ,header: {} &quot;</span> <span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-6-4-默认过滤器" tabindex="-1"><a class="header-anchor" href="#_6-6-4-默认过滤器" aria-hidden="true">#</a> 6.6.4 默认过滤器</h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/api/user/<span class="token important">**</span>
            <span class="token punctuation">-</span> After=2017<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T17<span class="token punctuation">:</span>42<span class="token punctuation">:</span>47.789<span class="token punctuation">-</span>07<span class="token punctuation">:</span>00<span class="token punctuation">[</span>America/Denver<span class="token punctuation">]</span>
      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> daimakuai is good
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-6-5-全局过滤器" tabindex="-1"><a class="header-anchor" href="#_6-6-5-全局过滤器" aria-hidden="true">#</a> 6.6.5 全局过滤器</h4><ul><li>概述</li></ul><p>**上述的过滤器是gateway中提供的默认的过滤器，每一个过滤器的功能都是固定的。**但是如果我们希望拦截请求，做自己的业务逻辑，默认的过滤器就没办法实现。此时就需求使用全局过滤器，全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><ul><li>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</li></ul><p><strong>请求参数中是否有username，如果同时满足则放行，否则拦截</strong></p><ul><li>步骤分析：</li></ul><ol><li><p>定义一个类实现<strong>GlobalFilter</strong>接口❓全局过滤器接口</p></li><li><p>重写filter方法</p></li><li><p>将该类纳入到spring容器中</p></li><li><p>实现<strong>Ordered</strong>接口定义该过滤器的顺序❓过滤器顺接口</p></li><li><p>实现<strong>globleFilte</strong>r里面的方法,然后进行放行操作</p></li><li><p>实现<strong>getOrder</strong>方法,实现过滤器排序</p></li></ol><ul><li>实现代码：判断请求路径中第一个参数是否是username,如果是正常访问,如果不是就不能正常访问</li></ul><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027105508582.png" alt="具体" tabindex="0" loading="lazy"><figcaption>具体</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token comment">//类交给Spring进行管理</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span><span class="token comment">//实现来年两个接口</span>

    <span class="token comment">//实现过滤器逻辑</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取请求路径中参数,判断参数是否是username,如果是放行,如果不是不能访问,就不放行</span>
        <span class="token comment">//参数中exchage:通过这个可以获得request对象</span>
        <span class="token comment">//参数中chain:</span>
        <span class="token comment">//方法getQueryParams()会返回一个Map对象,保存参数的信息,参数名是可以,参数值是value</span>
        <span class="token comment">//遍历map,获取所有的key根据key进行遍历</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//设置响应状态码</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//定义该过滤器的优先级</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-6-6-过滤器执行顺序" tabindex="-1"><a class="header-anchor" href="#_6-6-6-过滤器执行顺序" aria-hidden="true">#</a> 6.6.6 过滤器执行顺序</h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624170925571.png" alt="image-20230624170925571" tabindex="0" loading="lazy"><figcaption>image-20230624170925571</figcaption></figure><p>排序的规则是什么呢？</p><p>1、按照order的值进行排序，order的值越小，优先级越高，执行顺序越靠前。</p><p>2、路由过滤器和默认过滤器会按照order的值进行排序，这个值由spring进行指定，默认是按照声明顺序从1递增</p><p>3、当过滤器的order值一样时，会按照 globalFilter &gt; defaultFilter &gt; 路由过滤器的顺序执行</p><p>核心源码分析：org.springframework.cloud.gateway.handler.FilteringWebHandler#handle方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Route</span> route <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Route</span><span class="token punctuation">)</span>exchange<span class="token punctuation">.</span><span class="token function">getRequiredAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span><span class="token constant">GATEWAY_ROUTE_ATTR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 获取路由级别的过滤器和默认过滤器的集合</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">&gt;</span></span> gatewayFilters <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 获取全局过滤器的集合</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">&gt;</span></span> combined <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>globalFilters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 将取路由级别的过滤器和默认过滤器的集合中的元素添加到全局过滤器的集合中</span>
    combined<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>gatewayFilters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 进行排序</span>
    <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>combined<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted gatewayFilterFactories: &quot;</span> <span class="token operator">+</span> combined<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 调用过滤器链中的filter方法</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultGatewayFilterChain</span><span class="token punctuation">(</span>combined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-nacos配置中心" tabindex="-1"><a class="header-anchor" href="#_7-nacos配置中心" aria-hidden="true">#</a> 7.Nacos配置中心</h2><p>Nacos除了可以做注册中心，同样可以做配置管理来使用。</p><p>把多个为服务模块中相同配置,配置到配置中心中,所有模块读取配置中心中的内容.</p><ul><li>注册中心</li><li>配置中心</li></ul><h3 id="_7-1-统一配置管理" tabindex="-1"><a class="header-anchor" href="#_7-1-统一配置管理" aria-hidden="true">#</a> 7.1 统一配置管理</h3><p>相同配置部分进行抽取.</p><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就显得十分的不方便，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624171403235.png" alt="image-20230624171403235" tabindex="0" loading="lazy"><figcaption>image-20230624171403235</figcaption></figure><p>nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><h3 id="_7-2-nacos入门" tabindex="-1"><a class="header-anchor" href="#_7-2-nacos入门" aria-hidden="true">#</a> 7.2 Nacos入门</h3><h4 id="_7-2-1-nacos中添加配置" tabindex="-1"><a class="header-anchor" href="#_7-2-1-nacos中添加配置" aria-hidden="true">#</a> 7.2.1 Nacos中添加配置</h4><p>在Nacos服务端创建一个配置，如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624171530387.png" alt="image-20230624171530387" tabindex="0" loading="lazy"><figcaption>image-20230624171530387</figcaption></figure><p>然后在弹出的表单中，填写配置信息：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20210714164856664.png" alt="image-20210714164856664" tabindex="0" loading="lazy"><figcaption>image-20210714164856664</figcaption></figure><h4 id="_7-2-2-微服务集成配置中心" tabindex="-1"><a class="header-anchor" href="#_7-2-2-微服务集成配置中心" aria-hidden="true">#</a> 7.2.2 微服务集成配置中心</h4><p>微服务需要进行改造，从Nacos配置中心中获取配置信息进行使用。</p><p>步骤：</p><p>1、在spzx-cloud-user微服务中，引入spring-cloud-starter-alibaba-nacos-config依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- nacos作为配置中心时所对应的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在spzx-cloud-user项目的 /src/main/resources/application.yml 配置文件中配置 Nacos Config 地址并引入服务配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置数据库的连接信息</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.136.142<span class="token punctuation">:</span><span class="token number">8848</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> nacos<span class="token punctuation">:</span>spzx<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>user<span class="token punctuation">-</span>dev.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-3-读取自定义配置" tabindex="-1"><a class="header-anchor" href="#_7-2-3-读取自定义配置" aria-hidden="true">#</a> 7.2.3 读取自定义配置</h4><h5 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> @Value</h5><p>通过@Value注解读取自定义配置，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/api/user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${pattern.dateformat}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> pattern <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/findUserByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Truth&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;UserController...findUserByUserId方法执行了... ,header: {} , dateformat: {} &quot;</span> <span class="token punctuation">,</span> header <span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties" aria-hidden="true">#</a> @ConfigurationProperties</h5><p>也可以通过实体类，配合@ConfigurationProperties注解读取自定义配置，代码如下所示：</p><p>1、定义一个实体类，代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PatternProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat <span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在启动类上添加@EnableConfigurationProperties注解，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">PatternProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">UserApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、使用该实体类，代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/api/user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${pattern.dateformat}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> pattern <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>   <span class="token comment">// 注入实体类</span>
    <span class="token keyword">private</span> <span class="token class-name">PatternProperties</span> patternProperties <span class="token punctuation">;</span> 

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/findUserByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Truth&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;UserController...findUserByUserId方法执行了... ,header: {} , dateformat: {} &quot;</span> <span class="token punctuation">,</span> header <span class="token punctuation">,</span> patternProperties<span class="token punctuation">.</span><span class="token function">getDateformat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-配置热更新" tabindex="-1"><a class="header-anchor" href="#_7-3-配置热更新" aria-hidden="true">#</a> 7.3 配置热更新</h3><p>⭐我们最终的目的，是修改Nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。实现配置的热更新有两种方式：</p><blockquote><p>方式一：在@Value注入的变量所在类上添加注解**@RefreshScope**</p></blockquote><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624200928589.png" alt="image-20230624200928589" tabindex="0" loading="lazy"><figcaption>image-20230624200928589</figcaption></figure><blockquote><p>方式二：通过实体类，配合@ConfigurationProperties注解读取配置信息，<strong>自动</strong>支持热更新</p></blockquote><h3 id="_7-4-配置优先级" tabindex="-1"><a class="header-anchor" href="#_7-4-配置优先级" aria-hidden="true">#</a> 7.4 配置优先级</h3><p>思考问题：如果在application.yml文件中和Nacos配置中心中都定义了相同的配置内容，那么哪一个配置的优先级较高呢?</p><p>优先级顺序：Nacos配置中心的配置(后导入的配置 &gt; 先导入的配置) &gt; application.yml</p><h2 id="_8-sentinel部分" tabindex="-1"><a class="header-anchor" href="#_8-sentinel部分" aria-hidden="true">#</a> 8.Sentinel部分</h2><h3 id="_8-1-初识sentinel" tabindex="-1"><a class="header-anchor" href="#_8-1-初识sentinel" aria-hidden="true">#</a> 8.1 初识sentinel</h3><h4 id="_8-1-1-雪崩效应" tabindex="-1"><a class="header-anchor" href="#_8-1-1-雪崩效应" aria-hidden="true">#</a> 8.1.1 雪崩效应</h4><p>概述：在微服务系统架构中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。一个服务的不可用导致整个系统的不可用的现象就被称之为雪崩效应。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027143355361.png" alt="雪崩原理" tabindex="0" loading="lazy"><figcaption>雪崩原理</figcaption></figure><p>如下图所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203044831-16882902699931.png" alt="image-20230624203044831" tabindex="0" loading="lazy"><figcaption>image-20230624203044831</figcaption></figure><p>当服务D出现了问题了以后，调用服务D的服务A的线程就得不到及时的释放，在高并发情况下，随着时间的不断推移服务A的系统资源会被线程耗尽，最终导致服务A出现了问题，同理就会导致其他的服务也不能进行访问了。</p><h4 id="_8-1-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_8-1-2-解决方案" aria-hidden="true">#</a> 8.1.2 解决方案</h4><h5 id="超时处理" tabindex="-1"><a class="header-anchor" href="#超时处理" aria-hidden="true">#</a> 超时处理</h5><p>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p><p>称为:服务降级</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203153340-16882902699943.png" alt="image-20230624203153340" tabindex="0" loading="lazy"><figcaption>image-20230624203153340</figcaption></figure><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027144115270.png" alt="超时处理原理" tabindex="0" loading="lazy"><figcaption>超时处理原理</figcaption></figure><h5 id="隔离处理" tabindex="-1"><a class="header-anchor" href="#隔离处理" aria-hidden="true">#</a> 隔离处理</h5><p>隔离处理：将错误隔离在可控的范围之内，不要让其影响到其他的程序的运行。</p><p>这种设计思想，来源于船舱的设计，如下图所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203222353-16882902699932.png" alt="image-20230624203222353" tabindex="0" loading="lazy"><figcaption>image-20230624203222353</figcaption></figure><p>船舱都会被隔板分离为多个独立空间，当船体破损时，只会导致部分空间进入，将故障控制在一定范围内，避免整个船体都被淹没。于此类似，我们业务系统也可以使用这种思想来防止出现雪崩效应，常见的隔离方式：线程隔离</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203256590-16882902699944.png" alt="image-20230624203256590" tabindex="0" loading="lazy"><figcaption>image-20230624203256590</figcaption></figure><h5 id="熔断处理" tabindex="-1"><a class="header-anchor" href="#熔断处理" aria-hidden="true">#</a> 熔断处理</h5><p>类似于保险丝,电压过高会进行熔断.熔断是在<strong>降级的基础之上发生</strong>的.</p><p>熔断处理：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p><p>断路器会统计访问某个服务的请求数量，异常比例如下所示：</p><p>熔断是在降级的基础上发生的</p><p>⭐设置远程调用的超时时间.如果只做降级处理,都只会发送兜底数据,我们需要做熔断操作,1调用2,多次调用都是失败,不再调用执行熔断,1调用2直接返回兜底数据.</p><p><strong>制定一个规则</strong>,十次调用中有五次是调用失败,我们就会执行熔断</p><p>特点:提高很高的数据,熔断不可以无限,熔断需要设置时长,熔断五秒,超过五秒之后,会继续进行访问.这就是熔断的机制.</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203334370-16882902699945.png" alt="image-20230624203334370" tabindex="0" loading="lazy"><figcaption>image-20230624203334370</figcaption></figure><p>请求了三次，两次出现异常，一次成功。当发现访问服务D的请求异常比例过高时，认为服务D有导致雪崩的风险，会拦截访问服务D的一切请求，形成熔断：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203409785-16882902699946.png" alt="image-20230624203409785" tabindex="0" loading="lazy"><figcaption>image-20230624203409785</figcaption></figure><p>触发熔断了以后，当在访问服务A的时候，就不会在通过服务A去访问服务D了，立马给用户进行返回，返回的是一种默认值，这种返回就是一种兜底方案。这种兜底方案也将其称之为降级逻辑。</p><h5 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h5><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027153224912.png" alt="流量控制原理图" tabindex="0" loading="lazy"><figcaption>流量控制原理图</figcaption></figure><p>流量控制：限制业务访问的QPS(每秒的请求数)，避免服务因流量的突增而故障。</p><p>设置等待时间,时间过了就会返回兜底信息.</p><p>服务器在压力过大的情况下会发生宕机,所以我们对流量进行控制</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203508014-16882902699947.png" alt="image-20230624203508014" tabindex="0" loading="lazy"><figcaption>image-20230624203508014</figcaption></figure><p>限流是一种<strong>预防</strong>措施，避免因瞬间高并发流量而导致服务故障，进而避免雪崩。其他的处理方式是一种<strong>补救</strong>措施，在部分服务故障时，将故障控制在一定范围，避免雪崩。</p><h5 id="最终的目的" tabindex="-1"><a class="header-anchor" href="#最终的目的" aria-hidden="true">#</a> 最终的目的</h5><p>保护服务器,防止宕机</p><h5 id="qps-query-per-seconds" tabindex="-1"><a class="header-anchor" href="#qps-query-per-seconds" aria-hidden="true">#</a> QPS:query per seconds</h5><p>服务器每秒能处理的请求数量,衡量服务器的吞吐量</p><h5 id="阈值" tabindex="-1"><a class="header-anchor" href="#阈值" aria-hidden="true">#</a> 阈值</h5><p>临界值,比如服务器的qps是5,每秒处理5个请求,这个就叫做阈值.</p><h4 id="_8-1-3-sentinel介绍" tabindex="-1"><a class="header-anchor" href="#_8-1-3-sentinel介绍" aria-hidden="true">#</a> 8.1.3 sentinel介绍</h4><p>⭐:分为两部分:</p><ul><li>第一部分:核心库(java客户端)使用java代码能实现sentinel使用</li><li>第二部分:控制台,图形化界面,通过界面配置sentinel的控制</li></ul>`,127),S={href:"https://sentinelguard.io/zh-cn/",target:"_blank",rel:"noopener noreferrer"},q=s('<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><ul><li>Sentinel 的历史：</li></ul><p>- 2012 年，Sentinel 诞生，主要功能为入口流量控制。</p><p>- 2013-2017 年，Sentinel 在阿里巴巴集团内部迅速发展，成为基础技术模块，覆盖了所有的核心场景。Sentinel 也因此积累了大量的流量归整场景以及生产实践。</p><p>- 2018 年，Sentinel 开源，并持续演进。</p><p>- 2019 年，Sentinel 朝着多语言扩展的方向不断探索，推出 C++ 原生版本，同时针对 Service Mesh 场景也推出了 Envoy 集群流量控制支持，以解决 Service Mesh 架构下多语言限流的问题。</p><p>- 2020 年，推出 Sentinel Go 版本，继续朝着云原生方向演进。</p><ul><li>Sentinel 分为两个部分:</li></ul><p>- 核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</p><p>- 控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203655208-16882902699948.png" alt="image-20230624203655208" tabindex="0" loading="lazy"><figcaption>image-20230624203655208</figcaption></figure><p>具有的特征:</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624203730680-16882902699949.png" alt="image-20230624203730680" tabindex="0" loading="lazy"><figcaption>image-20230624203730680</figcaption></figure><h3 id="_8-2-sentinel入门" tabindex="-1"><a class="header-anchor" href="#_8-2-sentinel入门" aria-hidden="true">#</a> 8.2 sentinel入门</h3><h4 id="_8-2-1-下载sentinel控制台" tabindex="-1"><a class="header-anchor" href="#_8-2-1-下载sentinel控制台" aria-hidden="true">#</a> 8.2.1 下载sentinel控制台</h4>',15),B={href:"https://github.com/alibaba/Sentinel/releases",target:"_blank",rel:"noopener noreferrer"},U=s(`<figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624215112184-168829026999410.png" alt="image-20230624215112184" tabindex="0" loading="lazy"><figcaption>image-20230624215112184</figcaption></figure><p>下载完毕以后就会得到一个jar包</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624215403344-168829026999411.png" alt="image-20230624215403344" tabindex="0" loading="lazy"><figcaption>image-20230624215403344</figcaption></figure><h4 id="_8-2-2-启动sentinel" tabindex="-1"><a class="header-anchor" href="#_8-2-2-启动sentinel" aria-hidden="true">#</a> 8.2.2 启动sentinel</h4><ul><li>将jar包放到任意非中文目录，执行命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> sentinel-dashboard-2.0.0-alpha-preview.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：</li></ul><table><thead><tr><th><strong>配置项</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>服务端口</td></tr><tr><td>sentinel.dashboard.auth.username</td><td>sentinel</td><td>默认用户名</td></tr><tr><td>sentinel.dashboard.auth.password</td><td>sentinel</td><td>默认密码</td></tr></tbody></table><ul><li>例如，修改端口：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8090</span> <span class="token parameter variable">-jar</span> sentinel-dashboard-2.0.0-alpha-preview.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-2-3-访问sentinel" tabindex="-1"><a class="header-anchor" href="#_8-2-3-访问sentinel" aria-hidden="true">#</a> 8.2.3 访问sentinel</h4><p>访问http://localhost:8080页面，就可以看到sentinel的控制台了：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624215635555-168829026999412.png" alt="image-20230624215635555" tabindex="0" loading="lazy"><figcaption>image-20230624215635555</figcaption></figure><p>需要输入账号和密码，默认都是：sentinel</p><p>登录后，发现一片空白，什么都没有：因为还没有监控任何服务。另外，sentinel是懒加载的，如果服务没有访问，看不到该服务信息。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624215704921-168829026999413.png" alt="image-20230624215704921" tabindex="0" loading="lazy"><figcaption>image-20230624215704921</figcaption></figure><h4 id="_8-2-4-整合sentinel" tabindex="-1"><a class="header-anchor" href="#_8-2-4-整合sentinel" aria-hidden="true">#</a> 8.2.4 整合sentinel</h4><p>我们在spzx-cloud-user中整合sentinel，并连接sentinel的控制台，步骤如下：</p><p>1、引入sentinel依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--sentinel--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置控制台</p><p>修改application.yaml文件，添加下面内容</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>  <span class="token comment"># 配置sentinel控制台地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、访问spzx-cloud-user的任意接口</p>`,24),C={href:"http://localhost:10100/api/user/findUserByUserId/1%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E8%A7%A6%E5%8F%91sentinel%E7%9A%84%E7%9B%91%E6%8E%A7%E3%80%82%E7%84%B6%E5%90%8E%E5%86%8D%E8%AE%BF%E9%97%AEsentinel%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},E=s('<figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624220303385-168829026999414.png" alt="image-20230624220303385" tabindex="0" loading="lazy"><figcaption>image-20230624220303385</figcaption></figure><h3 id="_8-3-流量控制" tabindex="-1"><a class="header-anchor" href="#_8-3-流量控制" aria-hidden="true">#</a> 8.3 流量控制</h3><p>雪崩问题虽然有四种方案，但是限流是避免服务因突发的流量而发生故障，是对微服务雪崩问题的预防。我们先学习这种模式。</p><h4 id="_8-3-1-相关概念" tabindex="-1"><a class="header-anchor" href="#_8-3-1-相关概念" aria-hidden="true">#</a> 8.3.1 相关概念</h4><p><strong>簇点链路</strong>：当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做簇点链路。</p><p><strong>资源</strong>：簇点链路中被监控的每一个接口就是一个资源，流控、熔断等都是针对簇点链路中的资源来设置的。</p><p>默认情况下sentinel会监控spring mvc的每一个端点（Endpoint，也就是controller中的方法），因此spring mvc的每一个端点就是调用链路中的一个资源。</p>',7),F=n("p",{userId:""},"例如，我们刚才访问的spzx-cloud-user中的UserController中的端点：/api/user/findUserByUserId/",-1),R=s('<figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230624220603571-168829026999415.png" alt="image-20230624220603571" tabindex="0" loading="lazy"><figcaption>image-20230624220603571</figcaption></figure><p>我们可以点击对应资源后面的按钮来设置规则：</p><p>1、流控：流量控制</p><p>2、降级：降级熔断</p><p>3、热点：热点参数限流，是限流的一种</p><p>4、授权：请求的权限控制</p><h4 id="_8-3-2-快速入门" tabindex="-1"><a class="header-anchor" href="#_8-3-2-快速入门" aria-hidden="true">#</a> 8.3.2 快速入门</h4><p>需求：给 /api/user/findUserByUserId/{userId}这个资源设置流控规则，QPS不能超过 5，然后测试。</p><p>步骤：</p><p>1、首先在sentinel控制台添加限流规则</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628090407483-168829026999416.png" alt="image-20230628090407483" tabindex="0" loading="lazy"><figcaption>image-20230628090407483</figcaption></figure><p>2、利用jmeter测试(模拟并发请求)</p>',12),A=n("p",null,[a("Apache JMeter 是 Apache 组织基于 Java 开发的压力测试工具，用于对软件做"),n("strong",null,"压力测试"),a("。")],-1),P={href:"https://archive.apache.org/dist/jmeter/binaries/",target:"_blank",rel:"noopener noreferrer"},O=s(`<p>课前资料提供了编写好的Jmeter测试样例</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628115300889-168829026999417.png" alt="image-20230628115300889" tabindex="0" loading="lazy"><figcaption>image-20230628115300889</figcaption></figure><p>通过如下命令打开jmeter</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> ApacheJMeter.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入课前资料提供的测试样例</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320111824238-168829026999418.png" alt="image-20220320111824238" tabindex="0" loading="lazy"><figcaption>image-20220320111824238</figcaption></figure><p>选择流控入门</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320111955904-168829026999419.png" alt="image-20220320111955904" tabindex="0" loading="lazy"><figcaption>image-20220320111955904</figcaption></figure><p>10个线程，1秒内运行完，QPS是10，超过了5。</p><p>选中<strong>流控入门，QPS&lt;5</strong>右键运行</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320112040803-168829026999420.png" alt="image-20220320112040803" tabindex="0" loading="lazy"><figcaption>image-20220320112040803</figcaption></figure><p>注意：不要点击菜单中的执行按钮来运行。</p><p>点击查看结果树，理想的请求执行结果应该如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320112142379-168829026999421.png" alt="image-20220320112142379" tabindex="0" loading="lazy"><figcaption>image-20220320112142379</figcaption></figure><p>可以看到，成功的请求每次只有5个。</p><p><strong>注意：如果测试结果不是上述情况，那是因为sentinel在统计请求的时候，把一部分的请求统计到了下一秒中导致的。</strong></p><h4 id="_8-3-3-流控模式" tabindex="-1"><a class="header-anchor" href="#_8-3-3-流控模式" aria-hidden="true">#</a> 8.3.3 流控模式</h4><h5 id="流控模式简介" tabindex="-1"><a class="header-anchor" href="#流控模式简介" aria-hidden="true">#</a> 流控模式简介</h5><p>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：</p><p>1、直接：统计当前资源的请求，触发阈值时<strong>对当前资源直接限流，也是默认的模式</strong></p><p>2、关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p><p>3、链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231028091242707.png" alt="理解" tabindex="0" loading="lazy"><figcaption>理解</figcaption></figure><p>如下所示：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628091856122-168829026999422.png" alt="image-20230628091856122" tabindex="0" loading="lazy"><figcaption>image-20230628091856122</figcaption></figure><p>快速入门测试的就是直接模式。</p><h5 id="关联模式" tabindex="-1"><a class="header-anchor" href="#关联模式" aria-hidden="true">#</a> 关联模式</h5><p>A关联B,设置阈值1,访问B时候超过阈值,B不限流,对A进行限流</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027163806970.png" alt="image-20231027163806970" tabindex="0" loading="lazy"><figcaption>image-20231027163806970</figcaption></figure><p>关联模式：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p><p>配置方式：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628092034118-168829026999423.png" alt="image-20230628092034118" tabindex="0" loading="lazy"><figcaption>image-20230628092034118</figcaption></figure><p>**语法说明：**对/api/user/updateUserById资源的请求进行统计，当访问流量超过阈值时，就对/api/user/findUserByUserId/{userId}进行限流，避免影响/api/user/updateUserById资源。</p><p>使用场景：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p><p>案例实现：</p><p>1、在UserController新建一个端点：/api/user/updateUserById，无需实现业务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 修改用户数据端点</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/updateUserById&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;修改用户数据成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、重启服务，访问对应的端点，让其产生簇点链路</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628092515666-168829026999424.png" alt="image-20230628092515666" tabindex="0" loading="lazy"><figcaption>image-20230628092515666</figcaption></figure><p>3、配置流控规则，当/api/user/updateUserById资源被访问的QPS超过5时，对/api/user/findUserByUserId/1请求限流。对哪个端点限流，就点击哪个端点后面的按钮。我们是对用户查询/api/user/findUserByUserId/1限流，因此点击它后面的按钮：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628092751648-168829026999425.png" alt="image-20230628092751648" tabindex="0" loading="lazy"><figcaption>image-20230628092751648</figcaption></figure><p>4、在Jmeter中进行测试</p><p>选择《流控模式-关联》：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320114459422-168829026999426.png" alt="image-20220320114459422" tabindex="0" loading="lazy"><figcaption>image-20220320114459422</figcaption></figure><p>可以看到1000个线程，100秒，因此QPS为10，超过了我们设定的阈值：5</p><p>查看http请求：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628093126793-168829026999427.png" alt="image-20230628093126793" tabindex="0" loading="lazy"><figcaption>image-20230628093126793</figcaption></figure><p>请求的目标是/api/user/updateUserById，这样这个端点就会触发阈值。但限流的目标是/api/user/findUserByUserId/1，我们在浏览器访问，可以发现：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628093300378-168829026999428.png" alt="image-20230628093300378" tabindex="0" loading="lazy"><figcaption>image-20230628093300378</figcaption></figure><p>确实被限流了。</p><p>关联流控模式的使用场景：</p><p>1、两个有竞争关系的资源</p><p>2、一个优先级较高，一个优先级较低</p><p>对高优先级的资源的流量进行统计，当超过阈值对低优先级的资源进行限流。</p><h5 id="链路模式" tabindex="-1"><a class="header-anchor" href="#链路模式" aria-hidden="true">#</a> 链路模式</h5><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027163905542.png" alt="image-20231027163905542" tabindex="0" loading="lazy"><figcaption>image-20231027163905542</figcaption></figure><p>链路模式：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值，如果超过阈值对从该链路请求进行限流。</p><p>配置方式：</p><p>1、/api/user/save --&gt; users</p><p>2、/api/user/query --&gt; users</p><p>如果只希望统计从/api/user/query进入到users的请求，并进行限流操作，则可以这样配置：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628095013326-168829026999429.png" alt="image-20230628095013326" tabindex="0" loading="lazy"><figcaption>image-20230628095013326</figcaption></figure><p>案例实现：</p><p>1、在UserService中添加一个queryUsers方法，不用实现业务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在UserController中，添加两个端点，在这两个端点中分别调用UserService中的queryUsers方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;保存用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;订单保存成功&quot;</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/query&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;查询用户成功&quot;</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、通过**@SentinelResource**标记UserService中的queryUsers方法为一个sentinel监控的资源(默认情况下，sentinel只监控controller方法)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、更改application.yml文件中的sentinel配置</p><p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入spring mvc的所有请求设置同一个root资源，会导致链路模式失效。因此需要关闭这种资源整合。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">web-context-unify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭context整合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、重启服务，访问/api/user/save和/api/user/query，可以查看到sentinel的簇点链路规则中，出现了新的资源</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628094306219-168829026999430.png" alt="image-20230628094306219" tabindex="0" loading="lazy"><figcaption>image-20230628094306219</figcaption></figure><p>7、添加流控规则</p><p>点击users资源后面的流控按钮，在弹出的表单中填写下面信息：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628094433574-168829026999431.png" alt="image-20230628094433574" tabindex="0" loading="lazy"><figcaption>image-20230628094433574</figcaption></figure><p>只统计从/api/user/query进入/users的资源，QPS阈值为2，超出则被限流。</p><p>8、jmeter测试</p><p>选择《流控模式-链路》</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320150559229-168829026999432.png" alt="image-20220320150559229" tabindex="0" loading="lazy"><figcaption>image-20220320150559229</figcaption></figure><p>可以看到这里200个线程，50秒内发完，QPS为4，超过了我们设定的阈值2。</p><p>一个http请求是访问/api/user/save</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628094648097-168829026999433.png" alt="image-20230628094648097" tabindex="0" loading="lazy"><figcaption>image-20230628094648097</figcaption></figure><p>另一个是访问/api/user/query</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628094713655-168829026999434.png" alt="image-20230628094713655" tabindex="0" loading="lazy"><figcaption>image-20230628094713655</figcaption></figure><p>运行测试，察看结果树：</p><p>访问/api/user/save,没有进行限流</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628094814795-168829026999435.png" alt="image-20230628094814795" tabindex="0" loading="lazy"><figcaption>image-20230628094814795</figcaption></figure><p>访问/api/user/query,进行限流了</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628094857374-168829026999536.png" alt="image-20230628094857374" tabindex="0" loading="lazy"><figcaption>image-20230628094857374</figcaption></figure><h4 id="_8-3-4-流控效果" tabindex="-1"><a class="header-anchor" href="#_8-3-4-流控效果" aria-hidden="true">#</a> 8.3.4 流控效果</h4><p>在流控的高级选项中，还有一个流控效果选项</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628095109686-168829026999537.png" alt="image-20230628095109686" tabindex="0" loading="lazy"><figcaption>image-20230628095109686</figcaption></figure><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p><p>1、快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常，是默认的处理方式</p><p>2、warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常，但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值</p><p>3、排队等待：让所有的请求按照先后次序进入到一个队列中进行排队，当某一个请求最大的预期等待时间超过了所设定的超时时间时同样是拒绝并抛出异常</p><h5 id="warm-up" tabindex="-1"><a class="header-anchor" href="#warm-up" aria-hidden="true">#</a> warm up</h5><p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p><p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。<strong>阈值会动态变化</strong>，从一个较小值逐渐增加到最大阈值。</p><p><strong>工作特点</strong>：请求阈值初始值是 maxThreshold / coldFactor, 持续指定时长(预热时间)后，逐渐提高到maxThreshold值，而coldFactor的默认值是3。</p><p>例如，我设置QPS的maxThreshold为10，预热时间为5秒，那么初始阈值就是 10 / 3 ，也就是3，然后在5秒后逐渐增长到10。</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320152944101-168829026999538.png" alt="image-20220320152944101" tabindex="0" loading="lazy"><figcaption>image-20220320152944101</figcaption></figure><p><strong>案例需求</strong>：给/api/user/findUserByUserId/{userId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒</p><p>1、配置流控规则</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628095505037-168829026999539.png" alt="image-20230628095505037" tabindex="0" loading="lazy"><figcaption>image-20230628095505037</figcaption></figure><p>2、jmeter测试</p><p>选择《流控效果，warm up》</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320153409220-168829026999540.png" alt="image-20220320153409220" tabindex="0" loading="lazy"><figcaption>image-20220320153409220</figcaption></figure><p>QPS为10</p><p>刚刚启动时，大部分请求失败，成功的只有3个，说明QPS被限定在3：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320153522505-168829026999541.png" alt="image-20220320153522505" tabindex="0" loading="lazy"><figcaption>image-20220320153522505</figcaption></figure><p>随着时间推移，成功比例越来越高</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320153646510-168829026999542.png" alt="image-20220320153646510" tabindex="0" loading="lazy"><figcaption>image-20220320153646510</figcaption></figure><p>到sentinel控制台查看实时监控</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628095925921-168829026999543.png" alt="image-20230628095925921" tabindex="0" loading="lazy"><figcaption>image-20230628095925921</figcaption></figure><h5 id="排队等待" tabindex="-1"><a class="header-anchor" href="#排队等待" aria-hidden="true">#</a> 排队等待</h5><p><strong>排队等待</strong>：让所有的请求按照先后次序进入到一个队列中进行排队，当某一个请求最大的预期等待时间超过了所设定的超时时间时同样是拒绝并抛出异常</p><p>例如：QPS = 5，意味着每200ms处理一个队列中的请求；timeout = 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p><p>那什么叫做预期等待时长呢？</p><p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p><p>1、第6个请求的<strong>预期等待时长</strong> = 200 * （6 - 1） = 1000ms</p><p>2、第12个请求的预期等待时长 = 200 * （12-1） = 2200ms</p><p>现在，第1秒同时接收到10个请求，但第2秒只有1个请求，此时QPS的曲线这样的：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628100019712-168829026999544.png" alt="image-20230628100019712" tabindex="0" loading="lazy"><figcaption>image-20230628100019712</figcaption></figure><p>如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628100049968-168829026999545.png" alt="image-20230628100049968" tabindex="0" loading="lazy"><figcaption>image-20230628100049968</figcaption></figure><p>平滑的QPS曲线，对于服务器来说是更友好的。</p><p><strong>案例需求</strong>：给/api/user/findUserByUserId/{userId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s</p><p>1、添加流控规则</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628100313331-168829026999546.png" alt="image-20230628100313331" tabindex="0" loading="lazy"><figcaption>image-20230628100313331</figcaption></figure><p>2、jmeter测试</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320154801992-168829026999547.png" alt="image-20220320154801992" tabindex="0" loading="lazy"><figcaption>image-20220320154801992</figcaption></figure><p>QPS为15，已经超过了我们设定的10。</p><p>运行测试用例，察看结果树：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320155103019-168829026999548.png" alt="image-20220320155103019" tabindex="0" loading="lazy"><figcaption>image-20220320155103019</figcaption></figure><p>全部都通过了。</p><p>再去sentinel查看实时监控的QPS曲线</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320155202523-168829026999549.png" alt="image-20220320155202523" tabindex="0" loading="lazy"><figcaption>image-20220320155202523</figcaption></figure><p>QPS非常平滑，一致保持在10，但是超出的请求没有被拒绝，而是放入队列。因此<strong>响应时间</strong>（等待时间）会越来越长。</p><h4 id="_8-3-5-热点参数限流" tabindex="-1"><a class="header-anchor" href="#_8-3-5-热点参数限流" aria-hidden="true">#</a> 8.3.5 热点参数限流</h4><h5 id="配置介绍" tabindex="-1"><a class="header-anchor" href="#配置介绍" aria-hidden="true">#</a> 配置介绍</h5><p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p><p>例如，一个根据id查询商品的接口：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628100914491-168829026999550.png" alt="image-20230628100914491" tabindex="0" loading="lazy"><figcaption>image-20230628100914491</figcaption></figure><p>访问/goods/{id}的请求中，id参数值会有变化，热点参数限流会根据参数值分别统计QPS，统计结果：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628101012945-168829026999551.png" alt="image-20230628101012945" tabindex="0" loading="lazy"><figcaption>image-20230628101012945</figcaption></figure><p>当id=1的请求触发阈值被限流时，id值不为1的请求不受影响。</p><p>配置方式(点击资源中的热点按钮)：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628101216576-168829026999552.png" alt="image-20230628101216576" tabindex="0" loading="lazy"><figcaption>image-20230628101216576</figcaption></figure><p>代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒<strong>相同参数值</strong>的请求数不能超过2。这种配置是对查询商品这个接口的所有商品一视同仁，QPS都限定为5。而在实际开发中，可能部分商品是热点商品，例如秒杀商品，我们希望这部分商品的QPS限制与其它商品不一样，高一些。那就需要配置热点参数限流的高级选项了：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628101331468-168829026999553.png" alt="image-20230628101331468" tabindex="0" loading="lazy"><figcaption>image-20230628101331468</figcaption></figure><h5 id="案例演示" tabindex="-1"><a class="header-anchor" href="#案例演示" aria-hidden="true">#</a> 案例演示</h5><p><strong>案例需求</strong>：给/api/user/findUserByUserId/{userId}这个资源添加热点参数限流，规则如下：</p><p>1、默认的热点参数规则是每1秒请求量不超过2</p><p>2、给2这个参数设置例外：每1秒请求量不超过4</p><p>3、给3这个参数设置例外：每1秒请求量不超过10</p><p><strong>注意事项</strong>：热点参数限流对默认的spring mvc资源无效，需要利用@SentinelResource注解标记资源</p><p>实现步骤：</p><p>1、标记资源</p><p>给UserController中的/api/user/findUserByUserId/{userId}资源添加注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span><span class="token string">&quot;hot&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 声明资源名称</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/findUserByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId <span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Truth&quot;</span> <span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;UserController...findUserByUserId方法执行了... ,header: {} , dateformat: {} &quot;</span> <span class="token punctuation">,</span> header <span class="token punctuation">,</span> patternProperties<span class="token punctuation">.</span><span class="token function">getDateformat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、热点参数限流规则</p><p>访问该接口，可以看到我们标记的hot资源出现了</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628101715773-168829026999554.png" alt="image-20230628101715773" tabindex="0" loading="lazy"><figcaption>image-20230628101715773</figcaption></figure><p>这里不要点击hot后面的按钮，页面有BUG</p><p>点击左侧菜单中<strong>热点规则</strong>菜单：</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20230628102031276-168829026999555.png" alt="image-20230628102031276" tabindex="0" loading="lazy"><figcaption>image-20230628102031276</figcaption></figure><p>3、jmeter测试</p><p>选择《热点参数限流 QPS1》</p><figure><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20220320162420189-168829026999556.png" alt="image-20220320162420189" tabindex="0" loading="lazy"><figcaption>image-20220320162420189</figcaption></figure><p>这里发起请求的QPS为5。</p><p>包含三个请求，参数分别为：101 ， 102 ， 103，运行测试程序，察看结果树：</p><table><thead><tr><th>101</th><th><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027141831817.png" alt="image-20231027141831817" loading="lazy"></th></tr></thead><tbody><tr><td>102</td><td><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027141847549.png" alt="image-20231027141847549" loading="lazy"></td></tr><tr><td>103</td><td><img src="https://daimakuai.oss-cn-beijing.aliyuncs.com/img/image-20231027141908376.png" alt="image-20231027141908376" loading="lazy"></td></tr></tbody></table>`,175);function L(T,D){const e=i("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[a("打开浏览器访问nacos的所提供的后端管理界面："),n("a",r,[a("http://192.168.136.142:8848/nacos"),t(e)])]),d,n("p",null,[a("1、"),g,a("：获取请求uri，本例中就是 "),n("a",k,[a("http://spzx-cloud-user/api/user/findUserByUserId/1"),t(e)])]),m,n("p",null,[a("概述：feign是一个声明式的http客户端，官方地址："),n("a",v,[a("https://github.com/OpenFeign/feign其作用就是帮助我们优雅的实现http请求的发送。"),t(e)])]),b,h,f,n("p",null,[a("重启网关，访问"),n("a",y,[a("http://localhost:8222/api/user/findUserByUserId/1时，符合`/api/user/**`规则，"),t(e)])]),n("p",null,[a("请求转发到uri："),n("a",x,[a("http://spzx-cloud-user/api/user/findUserByUserId/1，得到了结果："),t(e)])]),_,n("p",null,[a("底层原理：框架底层会自动读取配置文件中的内容，然后通过制定的路由工厂将其转换成对应的判断条件，然后进行判断。在Gateway中提供了很多的路由工厂如下所示："),n("a",w,[a("https://docs.spring.io/spring-cloud-gateway/docs/4.0.6/reference/html/#gateway-request-predicates-factories"),t(e)])]),j,n("p",null,[a("官网地址："),n("a",I,[a("https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories"),t(e)])]),z,n("p",null,[a("官网地址："),n("a",S,[a("https://sentinelguard.io/zh-cn/"),t(e)])]),q,n("p",null,[a("sentinel管理后台下载地址："),n("a",B,[a("https://github.com/alibaba/Sentinel/releases"),t(e)])]),U,n("p",null,[a("打开浏览器，访问"),n("a",C,[a("http://localhost:10100/api/user/findUserByUserId/1，这样才能触发sentinel的监控。然后再访问sentinel的控制台，查看效果："),t(e)])]),E,F,R,n("blockquote",null,[A,n("p",null,[a("下载地址："),n("a",P,[a("https://archive.apache.org/dist/jmeter/binaries/"),t(e)])])]),O])}const N=p(l,[["render",L],["__file","SpringCloud.html.vue"]]);export{N as default};
